
Implementing loops

Notes: Modules in ansible can be executed multiple times using loops.


$ vim playbook11.yml

- name: Install software packages
  hosts: webserver
  tasks:
   - name: Install software
     apt:
      name: "{{item}}"
      state: present
      update_cache: no
     with_items:
      - tree
      - git
      - default-jdk
      - apache2
...

$ ansible-playbook  playbook11.yml  -b


Ex: Playbook to install diffrent s/w packages

$ vim playbook11.yml

- name: Install software packages
  hosts: webserver
  tasks:
   - name: Install software
     apt:
      name: "{{item}}"
      state: present
      update_cache: no
     with_items:
      - tree
      - git
      - default-jdk
      - apache2
...

++++++++++++++++++++++++



Requirement:
Tree needs to be installed
Git needs to be unintalled
jdk  needs to be updated
apache needs to be installed and update cache

$ cd playbooks
$ vim playbook12.yml

---
- name: Install software packages
  hosts: webserver
  tasks:
   - name: Install software
     apt:
      name: "{{item.a}}"
      state: "{{item.b}}"
      update_cache: "{{item.c}}"
     with_items:
      - {a: tree,b: present,c: no}
      - {a: git,b: absent,c: no}
      - {a: default-jdk,b: absent,c: no}
      - {a: apache2,b: present,c: yes}
...
save and quit

$ ansible-playbook  playbook12.yml  -b

+++++++++++++++++++++++
Ex: For working on multiple modules with multiple with_items.


Requirement: To create multiple users and files/directories in user's home directories.

$ vim playbook13.yml
---

---
- name: Create users and create files/dir in users home dir
  hosts: all
  tasks:
   - name: Create multiple users
     user:
      name: "{{item.a}}"
      password: "{{item.b}}"
      home: "{{item.c}}"
     with_items:
      - {a: Farhan,b: durgasoft,c: /home/Farhan}
      - {a: Ravi,b: durgasoft,c: /home/ubuntu/Ravi}
   - name: creating files and directories in users home dir
     file:
      name: "{{item.a}}"
      state: "{{item.b}}"
     with_items:
      - {a: /home/Farhan/file1,b: touch}
      - {a: /home/ubuntu/Ravi/dir1,b: directory}
...

save and quit

$ ansible-playbook  playbook13.yml  -b

---------
To check , user is created or not?
$ ssh 172.31.11.96
$ vim /etc/passwd

TO check files and dir  are created or not

$ cd /home/Farhan
$ ls     ( we can see the file)
$ cd
$ pwd
$ cd Ravi
$ ls  ( we can see the dir )
$ exit



+++++++++++++++++
Handlers
------------
Handler is a piece of code which is executed, if some other module is executed successfully and it has made some changes.

Handlers are always executed only after all the tasks are executed.
Handlers are executed in the order that are mentioned in the handler section, and not in the order they are called in the tasks section.
Even if handler is called multiple times in the tasks section, it will be executed only once.

Requirement:



$ vim playbook14.yml

---
- name: Confugure apache2 using handlers
  hosts: all
  tasks:
   - name: Install apache2
     apt:
      name: apache2
      state: present
   - name: Edit index.html file
     copy:
      content: "Logiclabs\n"
      dest: /var/www/html/index.html
     notify: Restart apache2
  handlers:
   - name: Restart apache2
     service:
      name: apache2
      state: restarted
...

$ ansible-playbook  playbook14.yml  -b

Note:
As editing the index.html file is successfull, handler is executed.

If you re run the playbook, handler is not executed.

++++++++++++++++++++++
Error Handling
-------------
If any module fails in ansible,the execution of the playbook terminates over there.
When we know that certain module might fail, and still we want to continue playbook execution, we can use error handling.
The section of code which might generate an error should be given in block section.
If it generates an error, the control comes to rescue section.
Always section is executed every time, irespective of whether the block is successfull or failure.

$ vim playbook15.yml


---
- name: Error handling
  hosts: all
  tasks:
   - block:
      - name: Install apache1
        apt:
         name: apache1
         state: present
     rescue:
      - name: Install apache2
        apt:
         name: apache2
         state: present
     always:
      - name: Check url response
        uri:
         url: "{{item}}"
        with_items:
         - http://172.31.7.134
         - http://172.31.3.46
         - http://172.31.2.140
         - http://172.31.6.241
...

$ ansible-playbook  playbook15.yml  -b
